{
  "process_graph": {
    "loadcollection1": {
      "process_id": "load_collection",
      "arguments": {
        "bands": [
          "B02",
          "B03",
          "B04",
          "B05",
          "B06",
          "B07",
          "B08",
          "B8A",
          "B11",
          "B12",
          "SCL"
        ],
        "id": "SENTINEL2_L2A",
        "properties": {
          "eo:cloud_cover": {
            "process_graph": {
              "lte1": {
                "process_id": "lte",
                "arguments": {
                  "x": {
                    "from_parameter": "value"
                  },
                  "y": 65
                },
                "result": true
              }
            }
          }
        },
        "spatial_extent": {
          "from_parameter": "bbox"
        },
        "temporal_extent": {
          "from_parameter": "temporal_extent"
        }
      }
    },
    "maskscldilation1": {
      "process_id": "mask_scl_dilation",
      "arguments": {
        "data": {
          "from_node": "loadcollection1"
        },
        "scl_band_name": "SCL"
      }
    },
    "filterbands1": {
      "process_id": "filter_bands",
      "arguments": {
        "bands": [
          "B02",
          "B03",
          "B04",
          "B05",
          "B06",
          "B07",
          "B08",
          "B8A",
          "B11",
          "B12"
        ],
        "data": {
          "from_node": "maskscldilation1"
        }
      }
    },
    "aggregatetemporalperiod1": {
      "process_id": "aggregate_temporal_period",
      "arguments": {
        "data": {
          "from_node": "filterbands1"
        },
        "period": "week",
        "reducer": {
          "process_graph": {
            "mean1": {
              "process_id": "mean",
              "arguments": {
                "data": {
                  "from_parameter": "data"
                }
              },
              "result": true
            }
          }
        }
      }
    },
    "applydimension1": {
      "process_id": "apply_dimension",
      "arguments": {
        "data": {
          "from_node": "aggregatetemporalperiod1"
        },
        "dimension": "t",
        "process": {
          "process_graph": {
            "arrayinterpolatelinear1": {
              "process_id": "array_interpolate_linear",
              "arguments": {
                "data": {
                  "from_parameter": "data"
                }
              },
              "result": true
            }
          }
        }
      }
    },
    "reducedimension1": {
      "process_id": "reduce_dimension",
      "arguments": {
        "data": {
          "from_node": "applydimension1"
        },
        "dimension": "t",
        "reducer": {
          "process_graph": {
            "median1": {
              "process_id": "median",
              "arguments": {
                "data": {
                  "from_parameter": "data"
                }
              },
              "result": true
            }
          }
        }
      }
    },
    "reducedimension2": {
      "process_id": "reduce_dimension",
      "arguments": {
        "data": {
          "from_node": "reducedimension1"
        },
        "dimension": "bands",
        "reducer": {
          "process_graph": {
            "runudf1": {
              "process_id": "run_udf",
              "arguments": {
                "context": {
                  "model_url": {
                    "from_parameter": "inference_url"
                  }
                },
                "data": {
                  "from_parameter": "data"
                },
                "runtime": "Python",
                "udf": "import sys\nfrom typing import Dict\nimport xarray as xr\nfrom openeo.udf import inspect\nimport requests\nimport numpy as np\nimport functools\n\n# Import the onnxruntime package from the onnx_deps directory\nsys.path.insert(0, \"onnx_deps\")\nimport onnxruntime as ort\n\n\n@functools.lru_cache(maxsize=6)\ndef _load_ort_session(model_url: str):\n    \"\"\"\n    Load the models and make the prediction functions.\n    The lru_cache avoids loading the model multiple times on the same worker.\n    \"\"\"\n    inspect(message=f\"Loading random forrest as ONNX runtime session ...\")\n    response = requests.get(model_url)\n    model = response.content\n    inspect(message=f\"Model loaded from {model_url}\", level=\"debug\")\n    return ort.InferenceSession(model)\n\ndef _apply_ml(input_data : np.ndarray, session: ort.InferenceSession) -> np.ndarray:\n    \"\"\"\n    Apply the model to a tensor containing features.\n    \"\"\"\n    return session.run(None, {'input': input_data})[0]\n    \n\ndef apply_datacube(cube: xr.DataArray, context: Dict) -> xr.DataArray:\n    \"\"\"\n    Apply the model to the datacube.\n    \"\"\"\n    # Load the model\n    session = _load_ort_session(context.get(\"model_url\", None))\n\n    # Prepare the input\n    cube = cube.values.astype(np.float32)\n    input_data = np.nan_to_num(cube, nan=-999999)\n    \n    #reshape to desired format\n    input_data = input_data.reshape((input_data.shape[0], -1)).T\n\n\n    # Make the prediction\n    output = _apply_ml(input_data, session)\n    # Prepare the output\n    output = output.reshape(cube.shape[1:])\n    return xr.DataArray(output)\n\n"
              },
              "result": true
            }
          }
        }
      },
      "result": true
    }
  },
  "id": "pv_inference",
  "parameters": [
    {
      "name": "bbox",
      "description": "The bounding box to load.",
      "schema": {
        "type": "object",
        "subtype": "geojson"
      }
    },
    {
      "name": "temporal_extent",
      "description": "The date range to calculate the temporal mean for.",
      "schema": {
        "type": "array",
        "subtype": "temporal-interval"
      },
      "default": [
        "2023-05-01",
        "2023-09-30"
      ],
      "optional": true
    },
    {
      "name": "inference_url",
      "description": "url to the inference network, must be on VITO artifactory",
      "schema": {
        "type": "string"
      },
      "default": "https://artifactory.vgt.vito.be/artifactory/auxdata-public/photovoltaic/rf_1_median_depth_15.onnx",
      "optional": true
    }
  ]
}